/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const zod = require('zod');
const fs = require('fs');
let allTodos = require('./todos.json');

const port = 4000;
const app = express();

const todoSchema = zod.object({
  title: zod.string(),
  // completed: zod.boolean(),
  description: zod.string()
});

app.use(bodyParser.json());

//API

app.get('/todos/:id', (req, res) => {
  if (!req.params.id) return res.status(404).json({
    msg: "Id is required"
  });
  let todo = allTodos.filter(e => e.id == req.params.id);
  if (todo.length == 0) return res.status(404).json({ msg: "No to found" });

  res.status(200).json(todo[0])
});

app.get('/todos', (req, res) => {
  res.status(200).json(allTodos)
});

app.post('/todos', (req, res) => {
  let body = req.body;
  let verify = todoSchema.safeParse(body);

  if (!verify.success) return res.status(400).json({
    msg: 'Somenting woring with your payload'
  });

  let newID = Math.floor(Math.random() * 1000000) // unique random id
  allTodos.push({
    id: newID,
    title: req.body.title,
    description: req.body.description
  });

  let jsonData = JSON.stringify(allTodos);

  fs.writeFile('./todos.json', jsonData, (err, data) => {
    if (err) {
      console.log(err)
      throw new err
    }
    res.status(201).json({
      id: newID,
      title: req.body.title,
      description: req.body.description
    });
  });

});

app.put('/todos/:id', (req, res) => {
  let body = req.body;
  let id = req.params.id;

  let indexOftodo = allTodos.findIndex(obj => obj.id == id);
  if (indexOftodo == -1) return res.status(404).json({ msg: "No todo found" });

  allTodos[indexOftodo].title = body.title;
  allTodos[indexOftodo].completed = body.completed;

  let jsonData = JSON.stringify(allTodos);


  fs.writeFile('./todos.json', jsonData, (err, data) => {
    if (err) {
      console.log(err)
      throw new err
    }
    res.status(200).json(allTodos[indexOftodo]);
  });

});

app.delete('/todos/:id', (req, res) => {
  let id = req.params.id;

  let indexOftodo = allTodos.findIndex(obj => obj.id == id);
  if (indexOftodo == -1) return res.status(404).send();

  let filteredArray = allTodos.filter(e => e.id != id);

  let jsonData = JSON.stringify(filteredArray);


  fs.writeFile('./todos.json', jsonData, (err, data) => {
    if (err) {
      console.log(err)
      throw new err
    }
    res.status(200).send()
  });

})

app.use((err, req, res, next) => {
  console.log(err)
  res.status(500).send('Internal server error');

});

app.all("*", (req, res, next) => {
  res.status(404).send('Route not found2');
});




app.listen(port, () => {
  console.log('Server is running in port, ', port);
});

module.exports = app;